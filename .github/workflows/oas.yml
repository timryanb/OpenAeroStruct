name: OAS build

# This workflow runs all unit and regression tests, as well as coveralls.
# On the pull-request events, this workflow runs OAS tests, checks code format by flake8/black, and builds the docs.
# On the push-to-main events, it also deploys the docs.

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  # --- run OAS unit and regression tests ---
  test:
    runs-on: ubuntu-latest
    env:
      VSP_VERSION: 3.27.1

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    # OAS dependencies are specified in setup.py.
    - name: Install OAS and its dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install .[test]

    # we need pySpline/pyGeo to run FFD tests.
    - name: Install pySpline and pyGeo
      run: |
        cd ..
        sudo apt-get install openmpi-bin libopenmpi-dev
        pip install mpi4py
        git clone https://github.com/mdolab/pyspline.git
        cd pyspline
        cp config/defaults/config.LINUX_GFORTRAN.mk config/config.mk
        make
        pip install -e .
        cd ..
        pip install "pygeo[testing] @ git+https://github.com/mdolab/pygeo.git"

    # we need OpenVSP to run vsp tests.
    - name: Install OpenVSP
      run: |
        export PYTHON_INCLUDE_DIR=$(python -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())")
        export PYTHON_LIBRARY=$(python -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
        cd ..
        sudo apt-get install cmake libx11-dev libfltk1.3-dev libcpptest-dev libglm-dev libeigen3-dev libcminpack-dev \
                             libglew-dev doxygen graphviz texlive-latex-base
        mkdir OpenVSP
        cd OpenVSP
        mkdir build buildlibs
        # Download source code
        wget -q https://github.com/OpenVSP/OpenVSP/archive/refs/tags/OpenVSP_${VSP_VERSION}.tar.gz
        tar -xf OpenVSP_${VSP_VERSION}.tar.gz
        mv OpenVSP-OpenVSP_${VSP_VERSION} repo
        # Build dependency libs
        cd buildlibs
        cmake -DVSP_USE_SYSTEM_LIBXML2=true -DVSP_USE_SYSTEM_FLTK=true -DVSP_USE_SYSTEM_GLM=true \
              -DVSP_USE_SYSTEM_GLEW=true -DVSP_USE_SYSTEM_CMINPACK=true -DVSP_USE_SYSTEM_LIBIGES=false \
              -DVSP_USE_SYSTEM_EIGEN=false -DVSP_USE_SYSTEM_CODEELI=false -DVSP_USE_SYSTEM_CPPTEST=false \
              -DPYTHON_INCLUDE_DIR=${PYTHON_INCLUDE_DIR} -DPYTHON_LIBRARY=${PYTHON_LIBRARY} ../repo/Libraries -DCMAKE_BUILD_TYPE=Release
        make -j8
        # Build OpenVSP
        cd ..
        export BUILD_LIBS_PATH=`pwd`
        cd build
        cmake ../repo/src/ -DVSP_NO_GRAPHICS=true -DVSP_LIBRARY_PATH=${BUILD_LIBS_PATH}/buildlibs \
              -DPYTHON_INCLUDE_DIR=${PYTHON_INCLUDE_DIR} -DPYTHON_LIBRARY=${PYTHON_LIBRARY} \
              -DCMAKE_BUILD_TYPE=Release
        make -j8
        make package
        # Install python interface
        pushd _CPack_Packages/Linux/ZIP/OpenVSP-${VSP_VERSION}-Linux/python
        pip install -r requirements.txt
        pushd ..
        # cp vspaero vspscript vspslicer vspviewer /usr/local/bin
        popd
        popd
        cd ${GITHUB_WORKSPACE}

    - name: Run tests
      env:
        OMPI_MCA_btl: ^openib   # prevent OpenMPI warning messages
      run: |
        python -m pytest --cov-config=.coveragerc --cov=openaerostruct --cov-report=xml

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  # --- code style check by flake8 ---
  flake8:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    # use both MDO Lab standard config
    - name: Code style (flake8)
      run: |
        pip install flake8==3.9.2
        wget https://raw.githubusercontent.com/mdolab/.github/main/.flake8 -O .flake8_mdolab
        python -m flake8 openaerostruct --append-config .flake8_mdolab --append-config .github/.flake8_oas_specific --count --show-source --statistics

  # --- code format check by black ---
  black:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    # code format check by black
    - name: Code format (black)
      run: |
        pip install black==22.3.0
        black openaerostruct --check --diff -l 120 --target-version py38
